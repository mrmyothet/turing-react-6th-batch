/* ap - applicative
 ap applies a list of functions to a list of values.
*/

result = R.ap([R.multiply(2), R.add(3)], [1, 2, 3]);
console.log(result);
// (6) [2, 4, 6, 4, 5, 6]

let arr = [1, 2, 3];
result = R.ap([R.multiply(2)], arr);
result = R.ap([R.add(3)], result);
console.log(result);
// (3) [5, 7, 9]

/* count
Returns the number of items in a given list matching the predicate f
*/

const even = (x) => x % 2 === 0;
result = R.count(even, [1, 2, 3, 4, 5]);
console.log(result); // 2

/*
Counts the elements of a list according to how many match each value of a key 
generated by the supplied function. 
Returns an object mapping the keys produced by fn to the number of occurrences in the list.
*/
const letters = ['a', 'b', 'A', 'a', 'B', 'c'];
result = R.countBy(R.toLower)(letters);
console.log(result);
// {a: 3, b: 2, c: 1}

result = R.countBy(R.identity)(letters);
console.log(result);
// {a: 2, b: 1, A: 1, B: 1, c: 1}

// curry - Returns a curried equivalent of the provided function.
function sum(a, b) {
  return a + b;
}

let curried = R.curry(sum);
console.log('Curried ', curried(2)(3));

// R.compose
// R.pipe

// All functions in Ramda are already curried.
